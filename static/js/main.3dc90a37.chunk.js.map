{"version":3,"sources":["comonents/Title.js","FirestoreConfig.js","comonents/Player.js","comonents/RundeTest.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","id","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","settings","timestampsInSnapshots","Player","state","itmes","_this2","this","collection","onSnapshot","snapshot","setState","docs","map","doc","data","undefined","item","playerName","gewonnen","verloren","patt","RoundTest","props","rundeComp","firstPlayerName","secondPlayerName","App","size","createRunde","console","log","_this","runde","i","push","RundeTest","get","then","snap","className","comonents_Title","comonents_Player","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dc90a37.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass Title extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 id=\"title\">Schach Turnier</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firebase-firestore';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB4nUgYGmoQABfPB-xNNSxndwuWNSeIIjA\",\r\n    authDomain: \"schach-turnier.firebaseapp.com\",\r\n    databaseURL: \"https://schach-turnier.firebaseio.com\",\r\n    projectId: \"schach-turnier\",\r\n    storageBucket: \"schach-turnier.appspot.com\",\r\n    messagingSenderId: \"981964467781\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nlet db = firebase.firestore();\r\ndb.settings({timestampsInSnapshots: true});\r\n\r\nexport default db;","import React, { Component } from 'react';\r\nimport db from '../FirestoreConfig';\r\nimport '../App.css';\r\n\r\n\r\nclass Player extends Component {\r\n\r\n    state = {\r\n        itmes:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n        db.collection('player').onSnapshot(snapshot => {\r\n          this.setState({\r\n            itmes: snapshot.docs.map(doc => {\r\n              // console.log(doc.data());\r\n              return {data: doc.data()};\r\n            })\r\n        })\r\n        })\r\n    }\r\n\r\n  render() {\r\n    const {itmes} = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Player</h1>\r\n        { itmes && itmes !== undefined ? itmes.map((item) => (\r\n          <tr id=\"playerTabele\">\r\n            <td><p id=\"name\">{item.data.playerName}</p></td>\r\n            <td><p id=\"win\">{item.data.gewonnen}</p></td>\r\n            <td><p id=\"lose\">{item.data.verloren}</p></td>\r\n            <td><p id=\"patt\">{item.data.patt}</p></td>\r\n          </tr>\r\n        )): null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import React, { Component } from 'react';\r\nimport db from '../FirestoreConfig';\r\n\r\n\r\nclass RoundTest extends Component {\r\n\r\n  state = {\r\n    itmes:[]\r\n}\r\n\r\n\r\ncomponentDidMount(props){\r\n  db.collection('runde ' + this.props.rundeComp).onSnapshot(snapshot => {\r\n    this.setState({\r\n      itmes: snapshot.docs.map(doc => {\r\n        // console.log(doc.data());\r\n          return {data: doc.data()};\r\n      })\r\n  })\r\n  })\r\n}\r\n\r\n  render() {\r\n    const {itmes} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h2>Runde {this.props.rundeComp}</h2>\r\n        { itmes && itmes !== undefined ? itmes.map((item) => (\r\n            <p id=\"gegner\">{item.data.firstPlayerName} - {item.data.secondPlayerName}</p>\r\n        )): null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundTest;\r\n","import React, {\n  Component\n} from 'react';\nimport './App.css';\n\nimport Title from './comonents/Title'\nimport Player from './comonents/Player'\nimport RoundTest from './comonents/RundeTest'\n\nimport db from './FirestoreConfig';\n\n\nclass App extends Component {\n\n  state = {\n    size: 0\n  }\n\n  componentDidMount() {\n    db.collection('player').get().then(snap => {\n      this.setState({\n        size: snap.size\n      })\n    })\n  }\n\n\n  createRunde = () => {\n\n    console.log(this.state.size);\n    let runde = []\n    // Outer loop to create parent,\n    for (let i = 1; i < this.state.size + 1; i++) {\n      runde.push( < div id = \"runde\" > < RoundTest rundeComp = {\n          i\n        }\n        /></div > )\n    }\n    return runde\n  }\n\n\n  render() {\n    return ( <\n      div className = \"APP\" >\n      <\n      div id = \"title\" >\n      <\n      Title / >\n      <\n      /div> <\n      div id = \"player\" >\n      <\n      Player / >\n      <\n      /div>\n\n      <\n      div id = \"runderoot\" > {\n        this.createRunde()\n      } <\n      /div> <\n      /div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}